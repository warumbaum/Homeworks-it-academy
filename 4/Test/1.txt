1. Фронтенд в большинстве случаев - это совокупность тех элементов веб-приложения, которая открывается в браузере. Иными словами, это интерфейсная часть веб-приложения: все, что браузер (приложение) может читать (html), выводить на экран (css) и запускать (java script, asp.net). Фронтенд отвечает за уровень представления веб-приложения. Типичный пример вида тестирования, применяющегося при разработке фронтенда, - это тестирование удобства пользования. 
Бекенд - это совокупность всех процессов веб-приложения, происходящих на сервере и выраженных на языках программирования Python, Java, PHP и др. Иными словами, это серверная часть веб-приложения. Бекенд отвечает на запросы фронтенда и в процессе ответа на эти запросы обращается к хранилищу данных (базам данных веб-приложения) и затем подставляет ответы в шаблон и возвращает во фронтенд. Бекенд отвечает за уровень доступа к данным веб-приложения. Типичный пример вида тестирования, применяющегося при разработке бекенда, - это юнит-тестирование. 
2. Кросс-браузерное тестирование - это вид тестирования, позволяющий сравнивать поведение разрабатываемого продукта в условиях использования на разных браузерах. При этом тестированию подвергается каждая фича, каждый элемент страницы, поскольку они могут вести себя по-разному в разных браузерах. Кросс-браузерное тестирование ставит конечной целью счастье пользователя, чтобы большинство аудитории сайта могло использовать корректно работающий продукт вне зависимости от используемого браузера. 
3. Если я нашел баг на веб-странице, помимо шагов воспроизведения бага я постараюсь приложить к баг-репорту следующие данные: 
- версию операционной системы и браузера; 
- статус авторизации пользователя (авторизован / неавторизован); 
- статус ошибки, выдаваемый браузером (при наличии); 
- кусок html кода, найденный при помощи панели разработчика и соответствующий месту ошибки на странице; 
- кусок java-script кода с предполагаемой ошибкой, находящийся в консоли JavaScript в панели разработчика;
- логи (соответствующие по времени возникновения ошибки) из вкладки Console в панели разработчика браузера;  
- записи сетевого журнала с запросами (соответствующие по времени возникновения ошибки), отправленные браузером серверу, а также ответы, которые приходят с сервера, их содержание и характеристики, из вкладки Network в панели разработчика браузера; 
- логи о профилированном времени исполнения и использование памяти веб приложением или страницей при развертывании ява-скриптов из вкладки Memory в панели разработчика браузера; 
- отчеты о безопасности подгружаемых второстепенных источников из вкладки Security в панели разработчика браузера; 
- ответы сервера на api-запросы, аналогичные запросам в браузере при возникновении ошибки.
4. GET и POST - это два самых распространенных метода запросов в протоколе HTTP. 
GET- запрос запрашивает веб-сервер предоставить информацию: например, при поиске заголовок запроса включается в состав URL-адреса с указанием условий поиска, диапазонов дат или другой информации.
POST-запрос запрашивает веб-сервер принять данные, содержащиеся в теле сообщения запроса: например, при загрузке файла или при отправке заполненной веб-формы.
Отличие GET и POST в том, что 1) GET используется, чтобы получить данные, POST - чтобы отправить; 2) GET содержит запрос в своем заголовок, POST - в теле запроса; 3) GET не изменяет состояние системы; POST изменяет состояние системы. 
5. API-тестирование представляет собой сравнение ожидаемого и фактического результата при общении одного веб-продукта с сервером другого веб-продукта. 
В широком смысле слова API - это метод, который один веб-продукт предоставляет другим веб-продуктам для коммуникации с ним: например, сайт, написанный на любом языке, не посылает на сервер никаких PHP/C/Python команд, а общается с ним с помощью HTTP запросов, описанных в API. Адрес, на который посылаются сообщения, называется Endpoint: обычно это URL. Задача тестировщика проверить все возможности общения через endpoint на предмет их корректного исполнения. 
При тестировании нужно учитывать, что API создаются во многом для интеграции сервисов. И работают с ними часто не люди, а другие программные системы. Поэтому нужно оценивать API с позиции удобства его использования другими продуктами, с позиции легкой интеграции с ним. API является полноценным самостоятельным продуктом. Поэтому все виды тестирования, к которым мы привыкли - функциональное тестирование, нагрузочное, тестирование безопасности, юзабилити, тестирование документации - не чужды при тестировании API. Тестируется в том числе документация. Отдельно следует выделить анализ граничных значений: в API запросах в явном виде могут передаваться значения параметров. Это отличный повод выделить границы входных и выходных значений и проверить их. А также часто используется при тестировании разбиение на классы эквивалентности: даже у небольшого API есть множество вариантов использования и множество комбинаций входных и выходных переменных. Поэтому мы можем лишний раз использовать метод выделения эквивалентных классов.
